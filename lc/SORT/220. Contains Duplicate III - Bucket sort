/*
Given an array of integers, find out whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most t 
and the absolute difference between i and j is at most k.
*/

class Solution:
    def containsNearbyAlmostDuplicate(self, nums: List[int], k: int, t: int) -> bool:
        if k < 0 or t < 0:
            return False
        
        bucket = {}

        for i, num in enumerate(nums):
            bucket_id = num / t if t != 0 else num

            for near_by in (bucket_id - 1, bucket_id, bucket_id + 1):
                if near_by in bucket and abs(bucket[near_by] - num) <= t:
                    return True

            # Note that there would be only one element in the bucket, other wise, two in same bucket would return turn in previous checking.
            # that means we need to replace the old element in the bucket, the old one won't do any good
            bucket[bucket_id] = num

            # since all the element in the bucket is most to the right (i is accumulating, most up to date), we can safely delete out of range bucket element
            # there won't be any concern about later element might update the same bucket value, since if there is such value, it would return already 
            
            if i >= k:
                expired = nums[i - k] / t if t != 0 else nums[i - k]
                del bucket[expired]

        return False
