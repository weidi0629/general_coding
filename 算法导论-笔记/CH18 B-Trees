-- good at working on disk or secondary strorage devices. 
  - minimize disk IO 
  
-- Data structures on secondary storage

-- The B-tree algorithms copy selected pages from disk into main memory as needed and write back onto disk the pages that have changed.


-- 18.1 Definition of B-trees 
  - each node
    - x.n, # of keys stored in the node 
    - n+1 pointer c1..cn+1 point to childern 
    - 上面的key 是subtree的分割
    - all leaves have the same depth 
    - t>=2 minimum degree
    - h <= logt(n+1)/2  n key, t minimun degree 
      - 因为是logt, 所以数是胖矮行的，avoid a substantial number of disk accesses.
    
    
###    18.2 Basic operations on B-trees  ### 

-- root always in the main memory 

-- searching B-tree 
  - we make an (x.n+1)-way branching decision
  
  B tree search 
  -- 利用了上面18.1, 上面的key是下面subtree的分割这个条件 

-- Creating an empty B-tree
  - ALLOCATE-NODE allocate a page in disk 
  
-- Inserting a key into a B-tree
  - 图比较直观 

pending Inserting a key into a B-tree in a single pass down the tree 
